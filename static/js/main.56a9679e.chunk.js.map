{"version":3,"sources":["EtaPanel.js","App.js","reportWebVitals.js","providers/util.js","providers/kmb.js","providers/ctb-nwfb.js","Providers.js","index.js"],"names":["EtaPanel","props","selectedStopId","tableData","now","Date","etaData","length","colSpan","map","o","millis","remark","etaStr","eta","Math","floor","etaDisplayStr","rowKey","selectedRoute","App","providers","useState","selectedProvider","Object","keys","selectedDirection","routeData","routeStops","appData","setAppData","updateRoutes","formData","getRoutes","then","data","updateRouteStops","catch","err","console","error","message","getStopsByRouteAndBound","fieldUpdator","fieldName","callback","event","preventDefault","copy","target","value","onSubmit","stopId","FormData","get","getEtaByRouteAndStopId","htmlFor","id","name","onChange","provider","route","bound","key","stop","i","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","groupBy","arr","keyExtractor","obj","el","push","toMap","Error","BASE_URL","ROUTES","STOPS","a","fetch","response","ok","statusText","json","filter","getStopsById","getStopIdsByRoute","stopIds","stopsById","companyId","routes","dest_en","dest_tc","dest_sc","service_type","getStopByStopId","stops","NWFB_CTY_PROVIDER","getStopsByRoute","getEta","PROVIDERS","KMB","NWFB","CITYBUS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56a9679e.chunk.js","sourcesContent":["function millisToMins(millis) {\r\n    return Math.floor(millis / (1000 * 60));\r\n}\r\n\r\nexport default function EtaPanel(props) {\r\n    if (props.selectedStopId === '') {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n    const now = new Date();\r\n    var tableData;\r\n    if (props.etaData.length === 0) {\r\n        tableData = <tr><td colSpan=\"2\">No data</td></tr>;\r\n    } else {\r\n        tableData = props.etaData.map(o => {\r\n            const remark = o['rmk_en']\r\n            const etaStr = o['eta'];\r\n            const eta = millisToMins(new Date(etaStr) - now);\r\n            const etaDisplayStr = eta <= 0 ? '<1 min' : `${eta} min(s)`;\r\n            const rowKey = `${props.selectedRoute}:${props.selectedStopId}:${etaStr}`\r\n            return (\r\n                <tr key={rowKey}>\r\n                    <td key={`${rowKey}:eta`}>{etaDisplayStr}</td>\r\n                    <td key={`${rowKey}:remark`}>{remark}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>ETA</td>\r\n                    <td>Remarks</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableData}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import { useState } from 'react';\nimport './App.css';\nimport EtaPanel from './EtaPanel';\n\nfunction App(props) {\n  const providers = props.providers;\n  const [appData, setAppData] = useState({\n    selectedProvider: Object.keys(providers)[0],\n    selectedRoute: '',\n    selectedDirection: 'outbound',\n    selectedStopId: '',\n    routeData: [],\n    routeStops: [],\n    etaData: [],\n  });\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const stopId = formData.get('Stop');\n    const providerApi = providers[appData.selectedProvider];\n    providerApi.getEtaByRouteAndStopId(appData.selectedRoute, stopId)\n      .then(data => setAppData({ ...appData, selectedStopId: stopId, etaData: data }))\n      .catch(err => console.error(err.message));\n  }\n\n  const updateRoutes = formData => {\n    const providerApi = providers[formData['selectedProvider']];\n    providerApi.getRoutes()\n      .then(data => {\n        updateRouteStops(\n          { ...formData, routeData: data, selectedRoute: Object.keys(data)[0] }\n        );\n      })\n      .catch(err => console.error(err.message));\n  }\n\n  const updateRouteStops = formData => {\n    const providerApi = providers[formData['selectedProvider']];\n    providerApi.getStopsByRouteAndBound(formData['selectedRoute'], formData['selectedDirection'])\n      .then(data => setAppData({ ...formData, routeStops: data, selectedStopId: '' }))\n      .catch(err => console.error(err.message));\n  }\n\n  const resetStopId = () => {\n    setAppData({ ...appData, selectedStopId: '' });\n  }\n\n  const fieldUpdator = (fieldName, callback = null) => {\n    return event => {\n      event.preventDefault();\n      var copy = { ...appData };\n      copy[fieldName] = event.target.value;\n      setAppData(copy);\n      if (callback !== null) {\n        callback(copy);\n      }\n    }\n  }\n\n  if (appData.routeData.length === 0) {\n    updateRoutes(appData);\n  }\n\n  return (\n    <main>\n      <h1>Is my bus here yet?</h1>\n      <form onSubmit={onSubmit}>\n        <fieldset>\n          <label htmlFor=\"provider\">Provider: </label>\n          <select id=\"provider\" name=\"Provider\" value={appData.selectedProvider} onChange={fieldUpdator('selectedProvider', updateRoutes)}>\n            {Object.keys(providers).map(provider => <option value={provider} key={provider}>{provider}</option>)}\n          </select>\n        </fieldset>\n        <fieldset>\n          <label htmlFor=\"route\">Route: </label>\n          <select id=\"route\" name=\"Route\" value={appData.selectedRoute} onChange={fieldUpdator('selectedRoute', updateRouteStops)}>\n            {Object.keys(appData.routeData).map(route => <option value={route} key={route}>{route}</option>)}\n          </select>\n        </fieldset>\n        <fieldset>\n          <label htmlFor=\"direction\">Destination: </label>\n          <select id=\"direction\" name=\"Direction\" value={appData.selectedDirection} onChange={fieldUpdator('selectedDirection', updateRouteStops)}>\n            {appData.selectedRoute !== '' && appData.routeData[appData.selectedRoute]\n              .map(o => {\n                const bound = o['bound'] === 'O' ? \"outbound\" : \"inbound\";\n                const key = `${appData.selectedRoute}:${bound}`;\n                return <option value={bound} key={key}>{o['dest_en']}</option>\n              })}\n          </select>\n        </fieldset>\n        <fieldset>\n          <label htmlFor=\"stop\">Stop: </label>\n          <select id=\"stop\" name=\"Stop\" onChange={resetStopId}>\n            {appData.routeStops.map((stop, i) => {\n              const stopId = stop['stop'];\n              const key = `${stopId}-${i}`\n              return <option value={stopId} key={key}>{stop['name_en']}</option>\n            })}\n          </select>\n          <button type=\"submit\">{appData.selectedStopId !== '' ? 'Refresh' : 'Go'}</button>\n        </fieldset>\n      </form>\n      <hr></hr>\n      <EtaPanel selectedRoute={appData.selectedRoute} selectedStopId={appData.selectedStopId} etaData={appData.etaData} />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export function groupBy(arr, keyExtractor) {\r\n    var obj = {};\r\n    for (const el of arr) {\r\n        const key = keyExtractor(el);\r\n        if (key in obj) {\r\n            obj[key].push(el);\r\n        } else {\r\n            obj[key] = [el];\r\n        }\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\nexport function toMap(arr, keyExtractor) {\r\n    var obj = {};\r\n    for (const el of arr) {\r\n        const key = keyExtractor(el);\r\n        if (key in obj) {\r\n            throw new Error(`Duplicate key: ${key}`);\r\n        }\r\n\r\n        obj[key] = el;\r\n    }\r\n\r\n    return obj;\r\n}","import { groupBy, toMap } from \"./util\";\r\n\r\nconst BASE_URL = \"https://data.etabus.gov.hk\";\r\n\r\nvar ROUTES = null;\r\nvar STOPS = null;\r\n\r\nasync function getRoutes() {\r\n    if (ROUTES == null) {\r\n        const response = await fetch(`${BASE_URL}/v1/transport/kmb/route`);\r\n        if (!response.ok) throw new Error(response.statusText);\r\n        var data = await response.json();\r\n        data = data['data'].filter(o => o['service_type'] === '1');\r\n        ROUTES = groupBy(data, o => o['route']);\r\n    }\r\n\r\n    return ROUTES;\r\n}\r\n\r\nasync function getStopsById() {\r\n    if (STOPS == null) {\r\n        const response = await fetch(`${BASE_URL}/v1/transport/kmb/stop`);\r\n        if (!response.ok) throw new Error(response.statusText);\r\n        const data = await response.json();\r\n        STOPS = toMap(data['data'], o => o['stop']);\r\n    }\r\n\r\n    return STOPS;\r\n}\r\n\r\nasync function getStopIdsByRoute(route, bound) {\r\n    const response = await fetch(`${BASE_URL}/v1/transport/kmb/route-stop/${route}/${bound}/1`);\r\n    if (!response.ok) throw new Error(response.statusText);\r\n    const data = await response.json();\r\n    return data['data'].map(o => o['stop']);\r\n}\r\n\r\nasync function getStopsByRoute(route, bound) {\r\n    const stopIds = await getStopIdsByRoute(route, bound);\r\n    const stopsById = await getStopsById();\r\n    return stopIds.map(stopId => stopsById[stopId]);\r\n}\r\n\r\nasync function getEta(route, stopId) {\r\n    const response = await fetch(`${BASE_URL}/v1/transport/kmb/eta/${stopId}/${route}/1`);\r\n    if (!response.ok) throw new Error(response.statusText);\r\n    const data = await response.json();\r\n    return data['data'];\r\n}\r\n\r\nexport const KMB_PROVIDER = {\r\n    getRoutes: getRoutes,\r\n    getStopsByRouteAndBound: getStopsByRoute,\r\n    getEtaByRouteAndStopId: getEta\r\n}","import { groupBy } from \"./util\";\r\n\r\nconst BASE_URL = \"https://rt.data.gov.hk\";\r\n\r\nconst ROUTES = {};\r\nconst STOPS = {};\r\n\r\nasync function getRoutes(companyId) {\r\n    if (!(companyId in ROUTES)) {\r\n        const response = await fetch(`${BASE_URL}/v1/transport/citybus-nwfb/route/${companyId}`);\r\n        if (!response.ok) throw new Error(response.statusText);\r\n        const data = await response.json();\r\n        const routes = [];\r\n        for (const route of data['data']) {\r\n            routes.push({\r\n                route: route['route'],\r\n                bound: 'O',\r\n                dest_en: route['dest_en'],\r\n                dest_tc: route['dest_tc'],\r\n                dest_sc: route['dest_sc'],\r\n                service_type: '1'\r\n            });\r\n            routes.push({\r\n                route: route['route'],\r\n                bound: 'I',\r\n                dest_en: route['orig_en'],\r\n                dest_tc: route['orig_tc'],\r\n                dest_sc: route['orig_sc'],\r\n                service_type: '1'\r\n            });\r\n        }\r\n\r\n        ROUTES[companyId] = groupBy(routes, o => o['route']);\r\n    }\r\n\r\n    return ROUTES[companyId];\r\n}\r\n\r\nasync function getStopIdsByRoute(companyId, route, bound) {\r\n    const response = await fetch(`${BASE_URL}/v1/transport/citybus-nwfb/route-stop/${companyId}/${route}/${bound}`);\r\n    if (!response.ok) throw new Error(response.statusText);\r\n    const data = await response.json();\r\n    return data['data'].map(o => o['stop']);\r\n}\r\n\r\nasync function getStopByStopId(stopId) {\r\n    if (!(stopId in STOPS)) {\r\n        const response = await fetch(`${BASE_URL}/v1/transport/citybus-nwfb/stop/${stopId}`);\r\n        if (!response.ok) throw new Error(response.statusText);\r\n        const data = await response.json();\r\n        STOPS[stopId] = data['data'];\r\n    }\r\n\r\n    return STOPS[stopId];\r\n}\r\n\r\nasync function getStopsByRoute(companyId, route, bound) {\r\n    const stopIds = await getStopIdsByRoute(companyId, route, bound);\r\n    const stops = [];\r\n    for (const stopId of stopIds) {\r\n        stops.push(await getStopByStopId(stopId));\r\n    }\r\n\r\n    return stops;\r\n}\r\n\r\nasync function getEta(companyId, route, stopId) {\r\n    const response = await fetch(`${BASE_URL}/v1/transport/citybus-nwfb/eta/${companyId}/${stopId}/${route}`);\r\n    if (!response.ok) throw new Error(response.statusText);\r\n    const data = await response.json();\r\n    return data['data'];\r\n}\r\n\r\nexport default function NWFB_CTY_PROVIDER(companyId) {\r\n    return {\r\n        getRoutes: () => getRoutes(companyId),\r\n        getStopsByRouteAndBound: (route, bound) => getStopsByRoute(companyId, route, bound),\r\n        getEtaByRouteAndStopId: (route, stopId) => getEta(companyId, route, stopId)\r\n    }\r\n}","import { KMB_PROVIDER } from \"./providers/kmb\";\r\nimport NWFB_CTY_PROVIDER from \"./providers/ctb-nwfb\";\r\n\r\nexport const PROVIDERS = {\r\n    KMB: KMB_PROVIDER,\r\n    NWFB: NWFB_CTY_PROVIDER('NWFB'),\r\n    CITYBUS: NWFB_CTY_PROVIDER('CTB'),\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PROVIDERS } from './Providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App providers={PROVIDERS} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}